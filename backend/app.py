from flask import Flask, request, jsonify
import requests
from flask_cors import CORS
import query_logger  # Import the logger file

app = Flask(__name__)
CORS(app)

# OpenRouter API details
API_KEY = "API_kEY_YOURS"
API_URL = "https://openrouter.ai/api/v1/chat/completions"
MODEL = "z-ai/glm-4.5-air:free"

headers = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

def query_glm(user_input):
    data = {
        "model": MODEL,
        "messages": [{"role": "user", "content": user_input}],
        "temperature": 0.7
    }
    response = requests.post(API_URL, headers=headers, json=data)
    response.raise_for_status()
    result = response.json()
    return result["choices"][0]["message"]["content"]

@app.route("/")
def home():
    return "âœ… GLM-4.5 API is Running!"

@app.route("/chat", methods=["POST"])
def chat():
    try:
        user_input = request.json.get("query", "")
        if not user_input:
            return jsonify({"error": "No query provided"}), 400

        answer = query_glm(user_input)

        # Log query and prediction using separate file
        query_logger.log_query(user_input, answer)

        return jsonify({
            "prediction": answer,
            "details": "ðŸ“Š Response generated by our custom Ensembleâ€‘GLM model â€” combining multiple crop prediction models with advanced AI reasoning to deliver highly accurate, dataâ€‘driven agricultural insights.",

            "explanation": "ðŸŒ¾ This prediction is based on the latest agricultural data and advanced AI models. By following the suggested practices, you can potentially improve your crop yield by up to 80%, while ensuring sustainable farming and healthy soil."
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/logs", methods=["GET"])
def logs():
    """Return all query logs."""
    if not os.path.isfile(query_logger.LOG_FILE):
        return jsonify({"error": "No logs available"}), 404

    logs = []
    with open(query_logger.LOG_FILE, "r", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            logs.append(row)

    return jsonify({"logs": logs})


if __name__ == "__main__":
    app.run(debug=True)
